@using WriteCongress.Core
@using WriteCongress.Web.Models
@model WriteCongress.Web.Models.IssueLetterViewModel
@section head{
    <link href='//fonts.googleapis.com/css?family=Pacifico' rel='stylesheet' type='text/css'>
}
@{
    ViewBag.Title = String.Format("Letter {0} {1} ({2})", Model.Letter.Against ? "opposing" : "supporting", Model.Issue.Name, Model.Letter.Name);    
}

<input type="hidden" id="letterslug" value="@Model.Letter.Slug" />
<div class="container-fluid">
    <div class="row-fluid">
        <div class="span8">
            <h1>@Model.Letter.Name</h1>
            <h2><a href="/Issues/@Model.Issue.Slug">@Model.Issue.Name</a></h2>
            <div>
                <p>
                    @Model.Letter.Description
                </p>
            </div>
            <div class="letter">
                <div class="letter-head">
                <span id="date">@DateTime.Now.ToString("MMMM d, yyyy")</span><br /><br />
                <span id="name">@Model.FirstName @Model.LastName</span><br />
                    <span id="address">
                        @Model.Address1<br />
                        @if (!String.IsNullOrWhiteSpace(Model.Address2)) {
                            @Model.Address2<br />
                        }
                    </span>
                <span id="city-state-zip">@Model.City @Model.State @Model.ZipCode</span><br />
                <span id="email">@Model.Email</span><br />
                <span id="phone">@Model.PhoneNumber</span><br /> <br />

                The Honorable <span id="addressse">[NAME OF REP OR SENATOR]</span> <br />
                
                [Location] <br />
 <br />
 </div>
                <div class="letter-reason">RE: @Model.Issue.Name</div>
                <br />

                @Html.Raw(Model.Letter.Body)
                Sincerely<br />
                <span class="signature" id="letter-signature">[Fill out form on right]</span>
            </div>
        </div>
        <div class="span4">
            <div class="well letterinfo">
                <h4>Send this letter</h4>
                <hr />
                <h5>Constituent Info @if (!User.Identity.IsAuthenticated){<a href="javascript:void(0);" class="login-label login-launcher"><span class="label label-info"><i class="icon-signin"></i>Sign In</span></a>}</h5>
                <input class="span4 livepreview ZipCode" type="text" id="zipcode" maxlength="5" placeholder="Zip Code" value="@Model.ZipCode" /><br />
                <input class="span6 livepreview" type="text" id="firstname" maxlength="11" placeholder="First Name" value="@Model.FirstName" />
                <input class="span6 livepreview" type="text" id="lastname" maxlength="20" placeholder="Last Name" value="@Model.LastName" /><br />
                <input class="span12 address" type="text" id="address1" maxlength="60" placeholder="Address 1" value="@Model.Address1" /><br />
                <input class="span12 address" type="text" id="address2" maxlength="60" placeholder="Address 2" value="@Model.Address2" /><br />
                <input class="span6 address zipautofill-city" type="text" id="city" maxlength="20" placeholder="City" value="@Model.City" />
                @{
                    var states = StateSelectorModel.States;
                    states.Where(s => s.Value == Model.State).Select(i => i.Selected == true);
                }
                @Html.DropDownList("state",@states,new{@class="span6 zipautofill-state address",size=1,placeholder="State"})
                <input class="span12" type="text" id="email" maxlength="55" placeholder="Email" value="@Model.Email" />
                <input class="span8" type="text" id="phonenumber" maxlength="17" placeholder="Phone Number (Optional)" value="@Model.PhoneNumber" /><br />
                <button id="beInvolved" class="btn btn-large btn-primary"><i class="icon-envelope"></i> Send</button>
            </div>
        </div>
    </div>
</div>
@Html.Partial("_PurchaseLetter")
@Html.Partial("_CreateAccount")

@section scripts{
    @if (User.Identity.IsAuthenticated) {
        <script type="text/javascript" src="https://js.stripe.com/v1/"></script>
        <script type="text/javascript" src="/scripts/StripeHelper.js"></script>
        <script type="text/javascript">
            Stripe.setPublishableKey('pk_test_nOvbLL4UrnJeKav4whH3rJO7');
        </script>
        <script type="text/javascript" src="/scripts/IssueLetterAuthenticated.js"></script>
    }
    else {<script type="text/javascript" src="/scripts/IssueLetterNonAuthenticated.js"></script>}

    <script type="text/javascript">
        $(function () {
            $('.livepreview').on('keyup', updateLetter);

            $('#zipcode').on('change', function () {
                var input = $(this);
                var zip = input.val();
                input.tooltip('destroy');
                geolocator.GetZipCodeInfo(zip).done(function (data) {
                    var address = geolocator.LocateMe();

                    if (data !== null) {
                        input.tooltip({ title: data.City + ' ' + data.StateAbbreviation });
                        $('.zipautofill-city').val(data.City);
                        $('.zipautofill-state').val(data.StateAbbreviation);

                        address.City = data.City;
                        address.State = data.StateAbbreviation;
                        address.Zip = zip;
                        address.CongressionalDistrict = data.CongressionalDistrict;
                        geolocator.SaveLocation(address);
                        congressPersonFinder.Find(address);
                    }
                });
            });

            $('.address').on('change', function() {
                var address1 = $('#address1').val();
                var address2 = $('#address2').val();
                var city = $('#city').val();
                var state = $('#state').val();
                var zip = $('#zipcode').val();
                

                if (address1.length > 4 && city.length > 2 && state.length == 2 && zip.length == 5) {
                    var address = new Address();
                    address.Address1 = address1;
                    address.Address2 = address2;
                    address.City = city;
                    address.State = state;
                    address.Zip = zip;

                    geolocator.NormalizeAddress(address).done(function (data) {
                        $('#city').val(data.City);
                        $('#state').val(data.State);
                        address.City = data.City;
                        address.State = data.State;
                        address.Zip = data.Zip;
                        address.CongressionalDistrict = data.CongressionalDistrict;
                        geolocator.SaveLocation(address);
                        congressPersonFinder.Find(address);
                    });
                }
            });

            function updateLetter() {
                var firstname = $('#firstname').val();
                var lastname = $('#lastname').val();
                if (firstname.length === 0 && lastname.length === 0) {
                    $('#letter-signature').html('[Fill out form on right]');
                } else {
                    $('#letter-signature').html(firstname + ' ' + lastname);
                }
            }

            ;
        });
    </script>
}