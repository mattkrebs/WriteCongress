@using System.Configuration
@using WriteCongress.Core
@using WriteCongress.Web.Models
@model WriteCongress.Web.Models.IssueLetterViewModel
@section head{<link href='//fonts.googleapis.com/css?family=Pacifico' rel='stylesheet' type='text/css'>}
@{ViewBag.Title = String.Format("Letter {0} {1} ({2})", Model.Letter.Against ? "opposing" : "supporting", Model.Issue.Name, Model.Letter.Name);}
<input type="hidden" id="letterslug" value="@Model.Letter.Slug" />
<div class="container-fluid">
    <div class="row-fluid">
        <div class="span8">
            <h1>@Model.Letter.Name</h1>
            <h2><a href="/Issues/@Model.Issue.Slug">@Model.Issue.Name</a></h2>
            <p>
                @Model.Letter.Description
            </p>

            <div id="letter" class="letter">
                <div id="letterHeader" class="letter-header">
                    <div>@DateTime.Now.ToString("MMMM d, yyyy")</div>
                    <div><span data-bind="{text:User().FirstName}"></span><span data-bind="{text:User().LastName}"></span></div>
                    <div>
                        <div data-bind="{text:User().AddressOne}"></div>
                        <div data-bind="{text:User().AddressTwo}"></div>
                        <span data-bind="{text:User().City}"></span><span data-bind="{text:User().State}"></span><span data-bind="{text:User().Zip}"></span>
                        <br />
                    </div>
                    <div data-bind="{text:User().Email}"></div>
                    <div data-bind="{text:User().PhoneNumber}"></div>
                </div>

                <div class="letter-recipients">
                    The Honorable <span id="addressse">[NAME OF REP OR SENATOR]</span>
                </div>
                <div class="letter-subject">RE: @Model.Issue.Name</div>
                <div class="letter-body">
                    @Html.Raw(Model.Letter.Body)
                </div>
                <div class="letter-signature">
                    Sincerely<br />
                    <span id="letter-signature"><span data-bind="{text:User.FirstName}"></span><span data-bind="{text:User.LastName}"></span></span>
                </div>
            </div>
        </div>
        <div class="span4">
            <div id="senderInfo" class="well letterinfo">
                <h4>Send this letter</h4>
                <hr />
                <h5>Constituent Info @if (!User.Identity.IsAuthenticated)
                                     {<a href="javascript:void(0);" class="login-label login-launcher"><span class="label label-info"><i class="icon-signin"></i>Sign In</span></a>}</h5>
                <input class="span4 livepreview ZipCode" type="text" id="zipcode" maxlength="5" placeholder="Zip Code" data-bind="{value:User().Zip}" /><br />
                <input class="span6 livepreview" type="text" id="firstname" maxlength="11" placeholder="First Name" data-bind="{value:User().FirstName, valueUpdate: 'afterkeydown'}" />
                <input class="span6 livepreview" type="text" id="lastname" maxlength="20" placeholder="Last Name" data-bind="{value:User().LastName, valueUpdate: 'afterkeydown'}" /><br />
                <input class="span12 address" type="text" id="address1" maxlength="60" placeholder="Address 1" data-bind="{value:User().AddressOne}" /><br />
                <input class="span12 address" type="text" id="address2" maxlength="60" placeholder="Address 2" data-bind="{value:User().AddressTwo}" /><br />
                <input class="span6 address zipautofill-city" type="text" id="city" maxlength="20" placeholder="City" data-bind="{value:User().City}" />
                <select data-bind="value:User().State" class="span6 zipautofill-state address" id="state" name="state" placeholder="State" size="1">
                    <option value="">State</option>
                    <option value="AL">Alabama</option>
                    <option value="AK">Alaska</option>
                    <option value="AZ">Arizona</option>
                    <option value="AR">Arkansas</option>
                    <option value="CA">California</option>
                    <option value="CO">Colorado</option>
                    <option value="CT">Connecticut</option>
                    <option value="DE">Delaware</option>
                    <option value="DC">District of Columbia</option>
                    <option value="FL">Florida</option>
                    <option value="GA">Georgia</option>
                    <option value="HI">Hawaii</option>
                    <option value="ID">Idaho</option>
                    <option value="IL">Illinois</option>
                    <option value="IN">Indiana</option>
                    <option value="IA">Iowa</option>
                    <option value="KS">Kansas</option>
                    <option value="KY">Kentucky</option>
                    <option value="LA">Louisiana</option>
                    <option value="ME">Maine</option>
                    <option value="MD">Maryland</option>
                    <option value="MA">Massachusetts</option>
                    <option value="MI">Michigan</option>
                    <option value="MN">Minnesota</option>
                    <option value="MS">Mississippi</option>
                    <option value="MO">Missouri</option>
                    <option value="MT">Montana</option>
                    <option value="NE">Nebraska</option>
                    <option value="NV">Nevada</option>
                    <option value="NH">New Hampshire</option>
                    <option value="NJ">New Jersey</option>
                    <option value="NM">New Mexico</option>
                    <option value="NY">New York</option>
                    <option value="NC">North Carolina</option>
                    <option value="ND">North Dakota</option>
                    <option value="OH">Ohio</option>
                    <option value="OK">Oklahoma</option>
                    <option value="OR">Oregon</option>
                    <option value="PA">Pennsylvania</option>
                    <option value="RI">Rhode Island</option>
                    <option value="SC">South Carolina</option>
                    <option value="SD">South Dakota</option>
                    <option value="TN">Tennessee</option>
                    <option value="TX">Texas</option>
                    <option value="UT">Utah</option>
                    <option value="VT">Vermont</option>
                    <option value="VA">Virginia</option>
                    <option value="WA">Washington</option>
                    <option value="WV">West Virginia</option>
                    <option value="WI">Wisconsin</option>
                    <option value="WY">Wyoming</option>
                </select>
                <input class="span12" type="text" id="email" maxlength="55" placeholder="Email" data-bind="value:User().Email" />
                <input class="span8" type="text" id="phonenumber" maxlength="17" placeholder="Phone Number (Optional)" data-bind="value:User().PhoneNumber" /><br />
                <button id="beInvolved" class="btn btn-large btn-primary"><i class="icon-envelope"></i>Send</button>
            </div>
        </div>
    </div>
</div>
@Html.Partial("_PurchaseLetter")
@Html.Partial("_CreateAccount")

@section scripts{
    @if (User.Identity.IsAuthenticated) {
        <script type="text/javascript" src="https://js.stripe.com/v1/"></script>
        <script type="text/javascript" src="/scripts/StripeHelper.js"></script>
        <script type="text/javascript"> Stripe.setPublishableKey('@ConfigurationManager.AppSettings["StripePublishableKey"]'); </script>
        <script type="text/javascript" src="/scripts/IssueLetterAuthenticated.js"></script>
    }
    else {
        <script type="text/javascript" src="/scripts/IssueLetterNonAuthenticated.js"></script>
    }

    <script type="text/javascript">
        var User = function(firstname, lastname, address1, address2, city, state, zip, email, phoneNumber) {
            this.FirstName = ko.observable(firstname);
            this.LastName = ko.observable(lastname);
            this.AddressOne = ko.observable(address1);
            this.AddressTwo = ko.observable(address2);
            this.City = ko.observable(city);
            this.State = ko.observable(state);
            this.Zip = ko.observable(zip);
            this.Email = ko.observable(email);
            this.PhoneNumber = ko.observable(phoneNumber);
            this.CongressionalDistrict = ko.observable(-1);
        };

        var LetterViewModel = function() {
            var self = this;

            self.User = ko.observable(new User(null, null, null, null, null, null, null, null, null));
            self.Authenticated = ko.observable(false);


            self.User().Zip.subscribe(function(zip) {
                geolocator.GetZipCodeInfo(zip).done(function(data) {
                    self.User().City(data.City);
                    self.User().State(data.StateAbbreviation);
                    self.User().CongressionalDistrict(data.CongressionalDistrict);
                });
            });

            this.Save = function() {
                window.location.setItem("user", ko.toJSON(self.User));
            };

            self.User().CongressionalDistrict.subscribe(self.Save);

            self.User().AddressOne.subscribe(function(address) {
                var user = self.User();
                if (user.CongressionalDistrict() == -1) {
                    if (address.length > 4 && user.City().length > 2 && user.State().length == 2 && user.Zip().length == 5) {
                        geolocator.NormalizeAddress(ko.toJS(user)).done(function(data) {
                            self.User().CongressionalDistrict(parseInt(data.CongressionalDistrict));
                        });
                    }
                }
            });
        };

        $(function() {
            var vm = new LetterViewModel();
            ko.applyBindings(vm, document.getElementById('senderInfo'));
            ko.applyBindings(vm, document.getElementById('letter'));
        });

    </script>
}